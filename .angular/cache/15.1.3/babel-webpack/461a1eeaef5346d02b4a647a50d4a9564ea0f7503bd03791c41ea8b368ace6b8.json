{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.URL_API}/login`;\n    this.jwtService = new JwtHelperService();\n  }\n  login(credenciais) {\n    return this.http.post(`${this.apiUrl}`, credenciais, {\n      observe: 'response',\n      responseType: 'text'\n    });\n  }\n  successLogin(token) {\n    localStorage.setItem('token', token);\n  }\n  isAuthenticated() {\n    let token = localStorage.getItem('token');\n    if (token !== null) {\n      return !this.jwtService.isTokenExpired(token);\n    }\n    return false;\n  }\n  logout() {\n    localStorage.clear();\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,WAAW,QAAQ,gCAAgC;AAG5D,SAASC,gBAAgB,QAAQ,oBAAoB;;;AAKrD,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJhB,WAAM,GAAG,GAAGJ,WAAW,CAACK,OAAO,QAAQ;IAE/C,eAAU,GAAqB,IAAIJ,gBAAgB,EAAE;EAEd;EAEvCK,KAAK,CAACC,WAAwB;IAC5B,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAC,GAAG,IAAI,CAACC,MAAM,EAAE,EAAEF,WAAW,EAAE;MACnDG,OAAO,EAAE,UAAU;MACnBC,YAAY,EAAE;KACf,CAAC;EACJ;EAEAC,YAAY,CAACC,KAAa;IACxBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;EACtC;EAEAG,eAAe;IACb,IAAIH,KAAK,GAAGC,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;IAEzC,IAAIJ,KAAK,KAAK,IAAI,EAAE;MAClB,OAAO,CAAC,IAAI,CAACK,UAAU,CAACC,cAAc,CAACN,KAAK,CAAC;;IAE/C,OAAO,KAAK;EACd;EAEAO,MAAM;IACJN,YAAY,CAACO,KAAK,EAAE;EACtB;;AA7BWnB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAoB,SAAXpB,WAAW;EAAAqB,YAFV;AAAM","names":["environment","JwtHelperService","AuthService","constructor","http","URL_API","login","credenciais","post","apiUrl","observe","responseType","successLogin","token","localStorage","setItem","isAuthenticated","getItem","jwtService","isTokenExpired","logout","clear","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\samue\\Documents\\fullstackC\\requerimento-app\\src\\app\\service\\auth.service.ts"],"sourcesContent":["import { Observable } from 'rxjs';\nimport { Credenciais } from '../shared/model/credenciais.model';\nimport { environment } from '../../environments/environment';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { JwtHelperService } from '@auth0/angular-jwt';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private apiUrl = `${environment.URL_API}/login`;\n\n  jwtService: JwtHelperService = new JwtHelperService();\n\n  constructor(private http: HttpClient) {}\n\n  login(credenciais: Credenciais): Observable<any> {\n    return this.http.post(`${this.apiUrl}`, credenciais, {\n      observe: 'response',\n      responseType: 'text',\n    });\n  }\n\n  successLogin(token: string): void {\n    localStorage.setItem('token', token);\n  }\n\n  isAuthenticated() {\n    let token = localStorage.getItem('token');\n\n    if (token !== null) {\n      return !this.jwtService.isTokenExpired(token);\n    }\n    return false;\n  }\n\n  logout() {\n    localStorage.clear();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}