{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./upload.service\";\nimport * as i2 from \"src/app/service/mensagemService\";\nimport * as i3 from \"@angular/platform-browser\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"primeng/fileupload\";\nconst _c0 = [\"file\"];\nfunction UploadComponent_img_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 5);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"src\", ctx_r1.urlFoto, i0.ɵɵsanitizeUrl);\n  }\n}\nexport class UploadComponent {\n  constructor(uploadService, mensagemService, sanitizer) {\n    this.uploadService = uploadService;\n    this.mensagemService = mensagemService;\n    this.sanitizer = sanitizer;\n    this.arquivoIncluidoEmitter = new EventEmitter(); // emite informacao depois do upload\n  }\n\n  ngOnInit() {}\n  validateFile(file) {\n    let isValidFile = true;\n    if (file.size === 0) {\n      this.mensagemService.mensagemAlerta('Não é possível enviar um arquivo com tamanho zero.');\n      isValidFile = false;\n    }\n    return isValidFile;\n  }\n  upload(event) {\n    this.onUpload(event);\n  }\n  onUpload(event) {\n    this.uploadService.create(this.file).subscribe(response => {\n      this.mensagemService.mensagemSucesso('Arquivo enviado com sucesso.');\n      this.arquivoIncluidoEmitter.emit();\n      this.file.clear();\n      this.onClear();\n      this.getArquivo();\n    }, error => {\n      this.mensagemService.mensagemError(error, 'Houve algum problema ao tentar salvar o arquivo.');\n    });\n  }\n  onClear() {\n    this.uploadedFiles = [];\n  }\n  getArquivo() {\n    this.uploadService.downloadArquivo().subscribe(data => {\n      this.createImageFromBlob(data);\n    }, error => {\n      this.mensagemService.mensagemError(error, 'Houve algum problema ao tentar recuperar o arquivo.');\n    });\n  }\n  createImageFromBlob(image) {\n    const reader = new FileReader();\n    reader.addEventListener('load', () => {\n      if (reader.result === 'data:') {\n        this.urlFoto = null;\n      } else {\n        this.urlFotoInsegura = reader.result;\n        this.trataUrlFoto(this.urlFotoInsegura);\n      }\n    }, false);\n    if (image) {\n      reader.readAsDataURL(image);\n    }\n  }\n  trataUrlFoto(dataUrl) {\n    console.log('url ', dataUrl);\n    this.urlFoto = this.sanitizer.bypassSecurityTrustUrl(dataUrl);\n  }\n}\nUploadComponent.ɵfac = function UploadComponent_Factory(t) {\n  return new (t || UploadComponent)(i0.ɵɵdirectiveInject(i1.UploadService), i0.ɵɵdirectiveInject(i2.MensagemService), i0.ɵɵdirectiveInject(i3.DomSanitizer));\n};\nUploadComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UploadComponent,\n  selectors: [[\"app-upload\"]],\n  viewQuery: function UploadComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.file = _t.first);\n    }\n  },\n  outputs: {\n    arquivoIncluidoEmitter: \"arquivoIncluidoEmitter\"\n  },\n  decls: 7,\n  vars: 3,\n  consts: [[1, \"form-group\"], [\"for\", \"texto\"], [\"name\", \"file\", \"chooseLabel\", \"Selecionar\", \"uploadLabel\", \"Salvar\", \"invalidFileSizeMessageSummary\", \"N\\u00E3o foi poss\\u00EDvel carregar o arquivo\", \"invalidFileSizeMessageDetail\", \"O arquivo excede o limite de 50MB\", 3, \"customUpload\", \"showCancelButton\", \"uploadHandler\", \"onClear\"], [\"file\", \"\"], [\"alt\", \"\", \"class\", \"img-thumbnail rounded mx-auto d-block\", \"width\", \"250\", 3, \"src\", 4, \"ngIf\"], [\"alt\", \"\", \"width\", \"250\", 1, \"img-thumbnail\", \"rounded\", \"mx-auto\", \"d-block\", 3, \"src\"]],\n  template: function UploadComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"label\", 1);\n      i0.ɵɵtext(2, \"Imagem pdf\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\")(4, \"p-fileUpload\", 2, 3);\n      i0.ɵɵlistener(\"uploadHandler\", function UploadComponent_Template_p_fileUpload_uploadHandler_4_listener($event) {\n        return ctx.upload($event);\n      })(\"onClear\", function UploadComponent_Template_p_fileUpload_onClear_4_listener() {\n        return ctx.onClear();\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(6, UploadComponent_img_6_Template, 1, 1, \"img\", 4);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"customUpload\", true)(\"showCancelButton\", false);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.urlFoto);\n    }\n  },\n  dependencies: [i4.NgIf, i5.FileUpload],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","i0","UploadComponent","constructor","uploadService","mensagemService","sanitizer","ngOnInit","validateFile","file","isValidFile","size","mensagemAlerta","upload","event","onUpload","create","subscribe","response","mensagemSucesso","arquivoIncluidoEmitter","emit","clear","onClear","getArquivo","error","mensagemError","uploadedFiles","downloadArquivo","data","createImageFromBlob","image","reader","FileReader","addEventListener","result","urlFoto","urlFotoInsegura","trataUrlFoto","readAsDataURL","dataUrl","console","log","bypassSecurityTrustUrl","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["C:\\Users\\samue\\Documents\\fullstackC\\requerimento-app\\src\\app\\shared\\componentes\\upload\\upload.component.ts","C:\\Users\\samue\\Documents\\fullstackC\\requerimento-app\\src\\app\\shared\\componentes\\upload\\upload.component.html"],"sourcesContent":["import { MensagemService } from 'src/app/service/mensagemService';\nimport { UploadService } from './upload.service';\nimport {\n  Component,\n  EventEmitter,\n  OnInit,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { FileUpload } from 'primeng/fileupload';\nimport {\n  DomSanitizer,\n  SafeResourceUrl,\n  SafeUrl,\n} from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-upload',\n  templateUrl: './upload.component.html',\n  styleUrls: ['./upload.component.scss'],\n})\nexport class UploadComponent implements OnInit {\n  @Output() arquivoIncluidoEmitter = new EventEmitter(); // emite informacao depois do upload\n\n  uploadedFiles: any;\n  urlFotoInsegura: any;\n  urlFoto: any;\n\n  @ViewChild('file') file: FileUpload;\n\n  constructor(\n    private uploadService: UploadService,\n    private mensagemService: MensagemService,\n    private sanitizer: DomSanitizer\n  ) {}\n\n  ngOnInit(): void {}\n\n  validateFile(file: File): boolean {\n    let isValidFile = true;\n    if (file.size === 0) {\n      this.mensagemService.mensagemAlerta(\n        'Não é possível enviar um arquivo com tamanho zero.'\n      );\n      isValidFile = false;\n    }\n\n    return isValidFile;\n  }\n\n  upload(event: any) {\n    this.onUpload(event);\n  }\n\n  onUpload(event: any): void {\n    this.uploadService.create(this.file).subscribe(\n      (response) => {\n        this.mensagemService.mensagemSucesso('Arquivo enviado com sucesso.');\n        this.arquivoIncluidoEmitter.emit();\n        this.file.clear();\n        this.onClear();\n        this.getArquivo();\n      },\n      (error) => {\n        this.mensagemService.mensagemError(\n          error,\n          'Houve algum problema ao tentar salvar o arquivo.'\n        );\n      }\n    );\n  }\n\n  onClear(): void {\n    this.uploadedFiles = [];\n  }\n\n  public getArquivo(): void {\n    this.uploadService.downloadArquivo().subscribe(\n      (data) => {\n        this.createImageFromBlob(data);\n      },\n      (error) => {\n        this.mensagemService.mensagemError(\n          error,\n          'Houve algum problema ao tentar recuperar o arquivo.'\n        );\n      }\n    );\n  }\n\n  createImageFromBlob(image: Blob) {\n    const reader = new FileReader();\n    reader.addEventListener(\n      'load',\n      () => {\n        if (reader.result === 'data:') {\n          this.urlFoto = null;\n        } else {\n          this.urlFotoInsegura = reader.result;\n          this.trataUrlFoto(this.urlFotoInsegura);\n        }\n      },\n      false\n    );\n\n    if (image) {\n      reader.readAsDataURL(image);\n    }\n  }\n\n  private trataUrlFoto(dataUrl: string) {\n    console.log('url ', dataUrl);\n    this.urlFoto = this.sanitizer.bypassSecurityTrustUrl(dataUrl);\n  }\n}\n","<div class=\"form-group\">\n  <label for=\"texto\">Imagem pdf</label>\n  <div>\n    <p-fileUpload name=\"file\" [customUpload]=\"true\" #file chooseLabel=\"Selecionar\" uploadLabel=\"Salvar\"\n      (uploadHandler)=\"upload($event)\" invalidFileSizeMessageSummary=\"Não foi possível carregar o arquivo\"\n      (onClear)=\"onClear()\" invalidFileSizeMessageDetail=\"O arquivo excede o limite de 50MB\" [showCancelButton]=false>\n    </p-fileUpload>\n  </div>\n\n  <img [src]=\"urlFoto\" alt=\"\" class=\"img-thumbnail rounded mx-auto d-block\" *ngIf=\"urlFoto\" width=\"250\" />\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}