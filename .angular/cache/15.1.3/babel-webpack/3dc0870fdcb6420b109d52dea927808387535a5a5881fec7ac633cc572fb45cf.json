{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ngx-toastr\";\nexport class AuthGuard {\n  constructor(authService, router, toastr) {\n    this.authService = authService;\n    this.router = router;\n    this.toastr = toastr;\n  }\n  canActivate(route, state) {\n    let authenticated = this.authService.isAuthenticated();\n    if (authenticated) {\n      return true;\n    } else {\n      this.toastr.error('Token expirado!', 'Por favor, faça o login novamente');\n      this.router.navigate(['login']);\n      return false;\n    }\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ToastrService));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;AAaA,OAAM,MAAOA,SAAS;EACpBC,YACUC,WAAwB,EACxBC,MAAc,EACdC,MAAqB;IAFrB,gBAAW,GAAXF,WAAW;IACX,WAAM,GAANC,MAAM;IACN,WAAM,GAANC,MAAM;EACb;EACHC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B,IAAIC,aAAa,GAAG,IAAI,CAACN,WAAW,CAACO,eAAe,EAAE;IAEtD,IAAID,aAAa,EAAE;MACjB,OAAO,IAAI;KACZ,MAAM;MACL,IAAI,CAACJ,MAAM,CAACM,KAAK,CAAC,iBAAiB,EAAE,mCAAmC,CAAC;MACzE,IAAI,CAACP,MAAM,CAACQ,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MAC/B,OAAO,KAAK;;EAEhB;;AAnBWX,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAY,SAATZ,SAAS;EAAAa,YAFR;AAAM","names":["AuthGuard","constructor","authService","router","toastr","canActivate","route","state","authenticated","isAuthenticated","error","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\samue\\Documents\\fullstackC\\requerimento-app\\src\\app\\auth\\auth.guard.ts"],"sourcesContent":["import { AuthService } from '../service/auth.service';\nimport { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  Router,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private toastr: ToastrService\n  ) {}\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    let authenticated = this.authService.isAuthenticated();\n\n    if (authenticated) {\n      return true;\n    } else {\n      this.toastr.error('Token expirado!', 'Por favor, faça o login novamente');\n      this.router.navigate(['login']);\n      return false;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}