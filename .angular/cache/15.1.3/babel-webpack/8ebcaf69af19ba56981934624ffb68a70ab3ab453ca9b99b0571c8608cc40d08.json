{"ast":null,"code":"import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nexport class AuthInterceptor {\n  constructor() {}\n  intercept(request, next) {\n    let token = localStorage.getItem('token');\n    if (token) {\n      const cloneReq = request.clone({\n        headers: request.headers.set('Authorization', `Bearer ${token}`)\n      });\n      return next.handle(cloneReq);\n    } else {\n      return next.handle(request);\n    }\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)();\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});\nexport const AuthInterceptorProvider = [{\n  provide: HTTP_INTERCEPTORS,\n  useClass: AuthInterceptor,\n  multi: true\n}];","map":{"version":3,"mappings":"AACA,SAKEA,iBAAiB,QACZ,sBAAsB;;AAI7B,OAAM,MAAOC,eAAe;EAC1BC,eAAe;EAEfC,SAAS,CACPC,OAAyB,EACzBC,IAAiB;IAEjB,IAAIC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAEzC,IAAIF,KAAK,EAAE;MACT,MAAMG,QAAQ,GAAGL,OAAO,CAACM,KAAK,CAAC;QAC7BC,OAAO,EAAEP,OAAO,CAACO,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUN,KAAK,EAAE;OAChE,CAAC;MACF,OAAOD,IAAI,CAACQ,MAAM,CAACJ,QAAQ,CAAC;KAC7B,MAAM;MACL,OAAOJ,IAAI,CAACQ,MAAM,CAACT,OAAO,CAAC;;EAE/B;;AAjBWH,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAa,SAAfb,eAAe;AAAA;AAoB5B,OAAO,MAAMc,uBAAuB,GAAG,CACrC;EACEC,OAAO,EAAEhB,iBAAiB;EAC1BiB,QAAQ,EAAEhB,eAAe;EACzBiB,KAAK,EAAE;CACR,CACF","names":["HTTP_INTERCEPTORS","AuthInterceptor","constructor","intercept","request","next","token","localStorage","getItem","cloneReq","clone","headers","set","handle","factory","AuthInterceptorProvider","provide","useClass","multi"],"sourceRoot":"","sources":["C:\\Users\\samue\\Documents\\fullstackC\\requerimento-app\\src\\app\\interceptors\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HTTP_INTERCEPTORS,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor() {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    let token = localStorage.getItem('token');\n\n    if (token) {\n      const cloneReq = request.clone({\n        headers: request.headers.set('Authorization', `Bearer ${token}`),\n      });\n      return next.handle(cloneReq);\n    } else {\n      return next.handle(request);\n    }\n  }\n}\n\nexport const AuthInterceptorProvider = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: AuthInterceptor,\n    multi: true,\n  },\n];\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}